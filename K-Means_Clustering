#include <stdlib.h>
#include <sstream>
#include <fstream>
#include <cmath>
#include <iostream>
using namespace std;

class Point {
private:
  int xCoord;
  int yCoord;
  int label;
  double distance;   // the distance to point's own cluster centroid

  Point() {
  }

  friend class Kmean;
}; // Point class


/******************************************************************************/

class Centroid {
private:
  int label;
  double distance;
  double centroidX;  // centroid x coordinate, double used for precision
  double centroidY;  // centroid y coordinate, double used for precision

  Centroid() {
  }

  friend class Kmean;
}; // Point class


/******************************************************************************/

class Kmean {
private:
  // Variables to store header and image information
  int numRows;
  int numCols;
  int minVal;
  int maxVal;
  int** imgAry;  // 2D array of image

  int K;                 // number of clusters
  int numPts;
  Point* pointSet;       // array of points, initially set to a large distance
  Centroid* Kcentroids;  // array of centroids for each cluster labeled 1 to K
  
	int change = 1;     // for tracking label changes, initial value set to > 0

  // Assigns each point a label from 1 to K
  void assignLabel() {
    int front = 0;
    int back = numPts - 1;
    int label = 1;

    while (front <= back) {
      pointSet[front++].label = label;
      label++;
      if (label > K) {
        label = 1;
      }
      pointSet[back--].label = label;
      label++;
      if (label > K) {
        label = 1;
      }
    }
  }
  
  // Reads each point in pointSet and writes its label onto the imgAry
  void point2Image() {
    for (int i = 0; i < numPts; i++) {
      imgAry[pointSet[i].xCoord][pointSet[i].yCoord] = pointSet[i].label;
    }
  }

  void prettyPrint(ofstream& outFile, int itrNum) {    
    outFile << "     *** Result of iteration " << itrNum << " ***\n";
    for (int i = 0; i < numRows; i++) {
      for (int j = 0; j < numCols; j++) {
        if (imgAry[i][j] > 0) {
          outFile << imgAry[i][j];
        } else {
          outFile << " ";
        }
      }
      outFile << endl;
    }
    outFile << endl << endl << endl;
  }
  
  // Computes centroids of each K cluster; stores it under label in Kcentroids
  void computeCentroids() {
    int* sumX = new int[K + 1]{};
    int* sumY = new int[K + 1]{};
    int* totalPt = new int[K + 1]{};

    int label;
    int index = 0;
    while (index < numPts) {
      label = pointSet[index].label;
      sumX[label] += pointSet[index].xCoord;
      sumY[label] += pointSet[index].yCoord;
      totalPt[label]++;
      index++;
    }
    label = 1;
    while (label <= K) {
      Kcentroids[label].centroidX = ((double) sumX[label] /
                                                       (double) totalPt[label]);
      Kcentroids[label].centroidY = ((double) sumY[label] /
                                                       (double) totalPt[label]);
      label++;
    }
  }
  
  // Computes the distance from a point to each of the K centroids, changing
  // label, if necessary, to whichever centroid is the closest
  void distanceMinLable() {
    int index = 0;
    while (index < numPts) {
      double minDist = 99999.0;
      double dist;
      int minLabel = 0;
      int label = 1;
      while (label <= K) {
        dist = computeDist(index, label);
        if (dist < minDist) {
          minLabel = label;
          minDist = dist;
        }
        label++;
      }
      if (pointSet[index].label != minLabel) {
        pointSet[index].label = minLabel;
        pointSet[index].distance = minDist;
        change++;
      }
      index++;
    }
  }

  // Computes distance from point at given index in pointSet to centroid
  double computeDist(int index, int centroid) {
    return (sqrt(pow((Kcentroids[centroid].centroidX - pointSet[index].xCoord),
              2.0) + pow((Kcentroids[centroid].centroidY -
              pointSet[index].yCoord), 2.0)));
  }

public:
  Kmean() {
  }

  Kmean(ifstream& inFile, int numClusters) {
    K = numClusters;
    // Reads image header - the first four integers in the input file
    // These determine the image numRows, numCols, minVal, and maxVal
    inFile >> numRows;
    inFile >> numCols;
    inFile >> minVal;
    inFile >> maxVal;
    // Dynamically allocates a 2D array, numRows by numCols
    imgAry = new int*[numRows];
    for (int i = 0; i < numRows; i++) {
      // List initializes the 2D array (using "{}") to 0, the default
      imgAry[i] = new int[numCols]{};
    }
    // Dynamically allocates an array of centroid Points
    Kcentroids = new Centroid[K + 1];
    for (int i = 0; i < K + 1; i++) {
      // Sets distance of all centroids to 0
      Kcentroids[i].distance = 0.0;
    }
  }
  
  // Reads points from inFile; writes non-zero pixels to outFile
  void extractPts(ifstream& inFile, fstream& outFile) {
    numPts = 0;
    int inVal = 0;
    for (int i = 0; i < numRows; i++) {
      for (int j = 0; j < numCols; j++) {
        inFile >> inVal;
        if (inVal > 0) {
          numPts++;
          outFile << i << " " << j << endl;
        }
      }
    }
    // Dynamically allocates an array of Points
    pointSet = new Point[numPts];
    for (int i = 0; i < numPts; i++) {
      pointSet[i].distance = 99999.0;
    }
  }

  // Reads each point from outFile, storing it in the pointSet array
  void loadPointSet(fstream& outFile) {
    int x;
    int y;
    int i = 0;

    while (outFile >> x >> y) {
      if (outFile.fail()) {
        cerr << "Bad input point set: outFile1 (argv[3]) is corrupted!\n";
        exit(1);
      }
      pointSet[i].xCoord = x;
      pointSet[i].yCoord = y;
      i++;
    }
  }

  void kMeansClustering(ofstream& outFile) {
    int iteration = 0;
    assignLabel();

    while (change > 0) {
      point2Image();
      prettyPrint(outFile, iteration);

      change = 0;
      computeCentroids();
      distanceMinLable();

      iteration++;
    }
  }

  void writePtSet(ofstream& outFile) {
    outFile << numPts << endl;
    outFile << numRows << " " << numCols << endl;
    int x;
    int y;
    int label;
    for (int i = 0; i < numPts; i++) {
      x = pointSet[i].xCoord;
      y = pointSet[i].yCoord;
      label = pointSet[i].label;
      outFile << x << " " << y << " " << label << endl;
    }
  }
}; // Kmean class


/******************************************************************************/

int main(int argc, char* argv[]) {
  Kmean kMean;
  int numClusters;

  // Program name is argv[0], so argc = number of arguments passed in + 1
  if (argc != 6) {
    cout << "Incorrect number of arguments in command line. ";
    cout << "Program must be run with an input file, three output files, and "
         << "K value - 5 total command line arguments." << endl;
    return 1;
  }
  
  // Input file is a text file representing a binary image with header
  ifstream inFile;
  inFile.open(argv[1]);

  // Output file 1 stores the result of extracting 2D points from the input file
  fstream outFile1;
  outFile1.open(argv[3], fstream::out);
  // Output file 2 stores a series of 2D debugging displays, one per iteration
  ofstream outFile2;
  outFile2.open(argv[4]);
  // Output file 3 stores a list of 2D points and their labels
  ofstream outFile3;
  outFile3.open(argv[5]);

  istringstream sStream(argv[2]);
  if (!(sStream >> numClusters)) {
    cout << "Invalid value for K input: " << argv[2] << endl;
    return 1;
  } else if (!sStream.eof()) {
    cout << "Trailing characters after number: " << argv[2] << endl;
    return 1;
  } else if (numClusters < 2) {
    cout << "Requested number of clusters (K value passed in through "
         << "argv[2]) must be at least two.\n";
    return 1;
  }

  // Performs initial reading to determine numRows, numCols, minVal and maxVal
  if (inFile.is_open()) {
    kMean = Kmean(inFile, numClusters);
  } else {
    cout << "\nUnable to open input file.";
    return 1;
  }

  if (!outFile1.is_open()) {
    cout << "\nUnable to open first output file.";
    return 1;
  } else if (!outFile2.is_open()) {
    cout << "\nUnable to open second output file.";
    return 1;
  } else if (!outFile3.is_open()) {
    cout << "\nUnable to open third output file.";
    return 1;
  }

  kMean.extractPts(inFile, outFile1);

  outFile1.close();

  outFile1.open(argv[3]);

  kMean.loadPointSet(outFile1);

  kMean.kMeansClustering(outFile2);

  kMean.writePtSet(outFile3);

  inFile.close();
  outFile1.close();
  outFile2.close();
  outFile3.close();
  
  return 0;
}
